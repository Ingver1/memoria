from collections.abc import Sequence
from typing import Any, ContextManager, Protocol

class _Metric(Protocol):
    def labels(self, *args: Any, **kwargs: Any) -> _Metric: ...
    def inc(self, amount: float = ...) -> None: ...
    def observe(self, value: float) -> None: ...
    def set(self, value: float) -> None: ...
    def time(self) -> ContextManager[Any]: ...

def Counter(name: str, documentation: str, labelnames: tuple[str, ...] = ...) -> _Metric: ...
def Gauge(name: str, documentation: str, labelnames: tuple[str, ...] = ...) -> _Metric: ...
def Histogram(
    name: str,
    documentation: str,
    labelnames: tuple[str, ...] = ...,
    buckets: Sequence[float] | None = ...,
) -> _Metric: ...

class CollectorRegistry: ...

REGISTRY: CollectorRegistry

class MultiProcessCollector: ...

CONTENT_TYPE_LATEST: str

def generate_latest(registry: CollectorRegistry | None = ...) -> bytes: ...
def make_asgi_app(registry: CollectorRegistry | None = ...) -> Any: ...
